set.seed(123456)
x <- runif(n,0,1) # x val
e <- rnorm(n,0,1) # error
v <- rnorm(n,1,1)
z <- v*x # iv val
y <- 4+0.3*x+e # true val
# a)
lm.1 <- lm(y~x)
# b)
install.packages("AER")
install.packages("AER")
library(AER)
lm.2 <- ivreg(y~x|z)
# plots to compare
par(mfrow = c(3,2))
plot(x,y,main = "True Value with Regression")
abline(lm.1, col = 'red')
abline(lm.2, col = 'blue')
plot(lm.1$fitted,lm.2$fitted, main = "OLS vs IV",
xlab = "OLS", ylab = "IV")
# residual plots
plot(x,lm.1$resid, main = "OLS Resid")
plot(x,lm.2$resid, main = "IV Resid")
# qqplots
qqplot(y,lm.1$fitted, ylim = c(3.95,4.35), main = "OLS qqPlot")
qqplot(y,lm.2$fitted, ylim = c(3.95,4.35), main = "IV qqPlot")
par(mfrow = c(1,1))
plot(y)
points(lm.1$fitted, col = "red")
points(lm.2$fitted, col = "blue")
# summaries
summary(lm.1)
summary(lm.2)
# summaries
summary(lm.1)
summary(lm.2)
summary(lm.1)$sigma
summary(lm.2)$sigma
summary(lm.1)$r.squared
summary(lm.2)$r.squared
# hw3
# 1)
n <- 500
# i)
xi <- runif(n,0,10)
mean(xi)
sd(xi)
# ii)
ui <- runif(n,0,36)
mean(ui)
sd(ui)
# iii)
yi <- 1+2*xi+ui
lm.0 <- lm(y~x)
summary(lm.0)
# hw3
# 1)
n <- 500
# i)
set.seed(123456)
xi <- runif(n,0,10)
mean(xi)
sd(xi)
# ii)
set.seed(123456)
ui <- runif(n,0,36)
mean(ui)
# The sample average of ui cannot be zero unless all
# 500 generated error numbers equals to zero. Since we
# generated from zero to 36, it is extremely unlikely that
# we will get 500 zero values for this error variable.
sd(ui)
# iii)
yi <- 1+2*xi+ui
lm.0 <- lm(y~x)
summary(lm.0)
# iii)
yi <- 1+2*xi+ui
lm.0 <- lm(yi~xi)
summary(lm.0)
# i)
set.seed(123456)
xi <- runif(n,0,10)
mean(xi)
sd(xi)
# ii)
set.seed(123456)
ui <- runif(n,0,36)
mean(ui)
# The sample average of ui cannot be zero unless all
# 500 generated error numbers equals to zero. Since we
# generated from zero to 36, it is extremely unlikely that
# we will get 500 zero values for this error variable.
sd(ui)
# iii)
yi <- 1+2*xi+ui
lm.0 <- lm(yi~xi)
summary(lm.0)
xi
ui
yi
lm.0 <- lm(yi~xi)
summary(lm.0)
residualPlot(lm.0)
# ii)
set.seed(123456)
ui <- rnorm(n,0,36)
mean(ui)
# The sample average of ui cannot be zero unless all
# 500 generated error numbers equals to zero. Since we
# generated from zero to 36, it is extremely unlikely that
# we will get 500 zero values for this error variable.
sd(ui)
# iii)
yi <- 1+2*xi+ui
lm.0 <- lm(yi~xi)
summary(lm.0)
# iv)
resids <- lm.0$residuals
sum(resids)
sum(xi*resids)
# v)
sum(ui)
sum(xi*ui)
?rnorm
?random
# vi)
# vi) i)
set.seed(567890)
xi2 <- runif(n,0,10)
mean(xi2)
sd(xi2)
# vi) ii)
set.seed(567890)
ui2 <- rnorm(n,0,36)
mean(ui2)
# Again, the sample average of ui2 cannot be zero unless all
# 500 generated error numbers equals to zero. Since we
# generated from zero to 36, it is extremely unlikely that
# we will get 500 zero values for this error variable.
sd(ui2)
# vi) iii)
yi2 <- 1+2*xi2+ui2
lm.02 <- lm(yi2~xi2)
summary(lm.02)
# i)
set.seed(123456)
xi <- runif(n,0,10)
mean(xi)
sd(xi)
# ii)
set.seed(123456)
ui <- rnorm(n,0,36)
mean(ui)
# The sample average of ui will not be zero unless all
# 500 generated error numbers equals to zero OR the
# samples are exactly symmetric with zero being the center.
# Since we generated with mu=zero with sd=36, it is extremely
# unlikely that we will get a sample mean exactly equal to 0.
sd(ui)
# vi)
# vi) i)
set.seed(567890)
xi2 <- runif(n,0,10)
mean(xi2)
sd(xi2)
# vi) ii)
set.seed(567890)
ui2 <- rnorm(n,0,36)
mean(ui2)
# Again, the sample average of ui2 will not be zero unless all
# 500 generated error numbers equals to zero OR the
# samples are exactly symmetric with zero being the center.
# Since we generated with mu=zero with sd=36, it is extremely
# unlikely that we will get a sample mean exactly equal to 0.
sd(ui2)
# hw3
# 1)
n <- 500
# i)
set.seed(123456)
xi <- runif(n,0,10)
mean(xi)
sd(xi)
# ii)
set.seed(123456)
ui <- rnorm(n,0,sqrt(36))
mean(ui)
# The sample average of ui will not be zero unless all
# 500 generated error numbers equals to zero OR the
# samples are exactly symmetric with zero being the center.
# Since we generated with mu=zero with sd=36, it is extremely
# unlikely that we will get a sample mean exactly equal to 0.
sd(ui)
# iii)
yi <- 1+2*xi+ui
lm.0 <- lm(yi~xi)
summary(lm.0)
# iv)
resids <- lm.0$residuals
sum(resids)
sum(xi*resids)
# v)
sum(ui)
sum(xi*ui)
# vi)
# vi) i)
set.seed(567890)
xi2 <- runif(n,0,10)
mean(xi2)
sd(xi2)
# vi) ii)
set.seed(567890)
ui2 <- rnorm(n,0,sqrt(36))
mean(ui2)
# Again, the sample average of ui2 will not be zero unless all
# 500 generated error numbers equals to zero OR the
# samples are exactly symmetric with zero being the center.
# Since we generated with mu=zero with sd=36, it is extremely
# unlikely that we will get a sample mean exactly equal to 0.
sd(ui2)
# vi) iii)
yi2 <- 1+2*xi2+ui2
lm.02 <- lm(yi2~xi2)
summary(lm.02)
## Section 3.1: Basic Multivariate Regression ---------------------------------
# colGPA = beta0 + beta1*hsGPA + beta2*ACT + u
library(foreign)
gpa1 = read.dta("http://fmwww.bc.edu/ec-p/data/wooldridge/gpa1.dta")
reg1 <- lm(colGPA ~ hsGPA + ACT, data = gpa1)
summary(reg1)
# determine the sample size and number of independent variables
n = nrow(gpa1)
k = 2
# extracting y
y <- gpa1$colGPA
# extracting X and adding column of 1s
x <- cbind(1, gpa1$hsGPA, gpa1$ACT)
x1 <- c(1, gpa1$hsGPA, gpa1$ACT)
# solving for beta1hat
betahat = solve(t(X)%*%X) %*% t(X)%*%y
# extracting X and adding column of 1s
X <- cbind(1, gpa1$hsGPA, gpa1$ACT)
# solving for beta1hat
betahat = solve(t(X)%*%X) %*% t(X)%*%y
summary(reg1)$coefficients
summary(reg1)$coefficients[,1]
# dataset
library(foreign)
gpa1 = read.dta("http://fmwww.bc.edu/ec-p/data/wooldridge/gpa1.dta")
# setting critical value alpha being 5%
alpha = 0.05
# regression
reg2 <- lm(colGPA~hsGPA+ACT+skipped, data = gpa1)
summary(reg2)
?rnorm
library(lpSolve)
usage <- read.csv("usage.csv")
library(lpSolve)
usage <- read.csv("usage.csv")
require(lpSolve)
install.packages(lpSolve)
install.packages(lpSolveAPI)
install.packages("lpSolve")
library(lpSolve)
usage <- read.csv("usage.csv")
library("state.division")
library("state.division")
data("state.division")
data("state")
state.division
head(state.x77)
state.region
rm(list = ls())
dat1 <- data("chickwts")
dat1
rm(list = ls())
data("chickwts")
data("chickwts")
dat1 <- chickwts
data("ChickWeight")
dat2 <- ChickWeight
rm(list = ls())
data("chickwts")
data("ChickWeight")
?chickwts
head(chickwts)
chickwts
ChickWeight
?ChickWeight
rm(list = ls())
library(wooldridge)
data(wooldridge)
dat1 <- data(wooldridge$BWGHT)
data(wooldridge)
data(wooldridge$bwght)
data(bwght)
rm(list = ls())
library(wooldridge)
dat1 <- data(bwght)
dat1
dat1 <- data(bwght)
# iii)
library(wooldridge)
data(bwght)
dat1 <- data(bwght)
dat1 <- data(bwght)
lm.1 <- lm(dat)
data(bwght)
bwght
dat1 <- data(bwght)
dat1
# dat1 <- data(bwght)
lm.1 <- lm(bwght ~ cigs)
# dat1 <- data(bwght)
lm.1 <- lm(bwght ~ cigs, data = "bwght")
# dat1 <- data(bwght)
lm.1 <- lm(bwght ~ cigs, data = bwght)
lm.2 <- lm(bwght ~ cigs+faminc, data = bwght)
summary(lm.1)
lm.1$model
lm.1$call
lm.1$rank
?lm
anova(lm.1)
anova(lm.1)$
df
?summary
lenght(lm.1$xlevels)
size(lm.1$xlevels)
length(lm.1$xlevels)
length(lm.1)
View(lm.1)
length(lm.1$fitted)
# sample size
length(cigs)
# sample size
length(bwght$cigs)
# R-squared value
lm.1$r.squared
# R-squared value
summary(lm.1)$r.squared
summary(lm.1)
# R-squared value
summary(lm.2)$r.squared
summary(lm.1)
summary(lm.2)
print(lm.1)
plot(lm.1)
plot(lm.1,lm.2)
plot(bwght$faminc, bwght$cigs)
abline(lm(cigs~faminc,data = bgwht))
abline(lm(cigs~faminc,data = bwght))
#summary(lm.1)
#summary(lm.2)
summary(lm(cigs~faminc, data = bwght))
# R-squared value
summary(lm.1)$r.squared
# R-squared value
summary(lm.2)$r.squared
#summary(lm.1)
#summary(lm.2)
summary(lm(cigs~faminc, data = bwght))$r.squared
# C2)
data("hprice1")
lm.3 <- lm(price ~ sqrft+bdrms, data = hprice1)
# ii)
summary(lm.3)$beta
# ii)
summary(lm.3)$Beta
# ii)
summary(lm.3)$coefficient
# ii)
summary(lm.3)$coefficient[2,1]
# iii)
summary(lm.3)$coefficient[2,1]+140*summary(lm.3)$coefficient[3,1]
# ii)
# estimated increase in price with 1 more bdrm, holding sqrft
summary(lm.3)$coefficient[3,1]
# iii)
# estimated increase in price with 1 bdrm ie 140 sqrft
summary(lm.3)$coefficient[3,1]+140*summary(lm.3)$coefficient[2,1]
summary(lm.3)
# iv)
summary(lm.3)$r.squared
hprice1[1,]
# v)
lm.3$fitted(1)
# v)
lm.3$fitted[1]
# vi)
lm.3$residuals[1]
# C8)
# i)
data("discrim")
mean(discrim$prpblck)
sd(discrim$prpblck)
mean(discrim$income)
sd(discrim$income)
discrim$prpblck
mean(discrim$prpblck)
discrim$income
discrim[385,]
mean(discrim$prpblck, na.rm = T)
mean(discrim$prpblck, na.rm = T)
sd(discrim$prpblck, na.rm = T)
mean(discrim$income, na.rm = T)
sd(discrim$income, na.rm = T)
?discrim
sum(discrim$prpblck, na.rm = T)
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim)
summary(lm.1)
summary(lm.2)
summary(lm.3)
# sample size
length(lm.3$fitted)
# R-squared value
summary(lm.3)$r.squared
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim)
# sample size
length(lm.4$fitted)
# R-squared value
summary(lm.4)$r.squared
summary(lm.4)
length(discrim$prpblck, na.rm = T)
length(discrim$prpblck)
length(discrim$prpblck==NA)
length(c(discrim$prpblck==NA))
discrim$prpblck
discrim$income
lm.4$fitted.values
length(lm.4$fitted)
length(lm.4$fitted.values)
discrim$psoda
length(lm.1$fitted)
length(lm.2$fitted)
length(bwght$cigs)
length(bwght$faminc)
nrow(lm.1)
nrow(bwght)
nrow(discrim)
lm.4$residuals
lm.4$fitted
length(lm.4$fitted.values)
length(lm.4$psoda)
length(discrim$psoda)
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim, na.rm=T)
?lm
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim, na.action = na.omit())
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim, na.action = na.omit(NA))
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim, na.action = na.omit(lm.4))
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim, na.action = na.omit(c(discrim)))
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim, na.action = na.omit)
# sample size ?????????????????????????????????????
length(lm.4$fitted)
nrow(lm.4)
nrow(lm.4$fitted.values)
nrow(discrim$psoda)
nrow(discrim$prpblck)
nrow(discrim)
# ii)
lm.4 <- lm(psoda ~ prpblck+income, data = discrim, na.action = na.omit)
# sample size
length(lm.4$fitted)  # 410-9 NA values, OR
nrow(discrim)  # 410 depending on what "sample size" means
# R-squared value
summary(lm.4)$r.squared
summary(lm.4)
summary(lm.3)
discrim$prpblck==NA
anyNA(discrim$prpblck)
sum( is.na( data ) ) > 0
sum( is.na(discrm$prpblck) ) > 0
sum( is.na(discrim$prpblck) ) > 0
summary(lm.4)
# to check if AT LEAST 1 NA, [anyNA()] or [sum(is.na(data))>0]
# deal with NA values
mean(discrim$prpblck, na.rm = T)
sd(discrim$prpblck, na.rm = T)
# iii)
lm.5 <- lm(psoda ~ prpblck, data = discrim,
na.action = na.omit)
summary(lm.5)
# iv)
lm.6 <- lm(log(psoda) ~ prpblck+log(income), data = discrim,
na.action = na.omit)
summary(lm.6)
# v)
lm.7 <- lm(log(psoda) ~ prpblck+log(income)+prppov, data = discrim,
na.action = na.omit)
lm.7$coefficients[2,1]
lm.7$coefficients
lm.7$coefficients$prpblck
lm.7$coefficients[prpblck]
lm.7$coefficients["prpblck"]
# vi)
cor(log(discrim$income),discrim$prppov, use = complete.obs)
# vi)
cor(log(discrim$income),discrim$prppov, use = "complete.obs")
plot(log(discrim$income),discrim$prppov)
summary(lm.6)
summary(lm.7)
summary(lm(log(psoda) ~ prpblck++prppov, data = discrim,
na.action = na.omit))
